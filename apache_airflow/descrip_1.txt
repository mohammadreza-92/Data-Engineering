{\rtf1\ansi\ansicpg1252\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Oblique;\f2\fswiss\fcharset0 Helvetica-Bold;
}
{\colortbl;\red255\green255\blue255;\red31\green31\blue31;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c16078\c16078\c16078;\cssrgb\c100000\c100000\c100000;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs40 \AppleTypeServices\AppleTypeServicesF65539 \cf2 \cb3 \expnd0\expndtw0\kerning0
There are some essential characteristics and terms associated with Stream processing that we should be aware of to understand the strengths and limitations of any Streaming framework :\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f1\i \AppleTypeServices\AppleTypeServicesF65539 \cf2 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Delivery Guarantees
\f0\i0 \AppleTypeServices\AppleTypeServicesF65539 :\cb1 \uc0\u8232 \cb3 It means what is the guarantee that no matter what, a particular incoming record in a streaming engine will be processed. It can be either At least once (will be processed at least one time even in case of failures), at Almost-once (may not be processed in case of failures), or Exactly once (will be processed one and exactly one time even in case of losses). Exactly once is desirable but is hard to achieve in distributed systems and comes in tradeoffs with performance.\cb1 \
\ls1\ilvl0
\f1\i \AppleTypeServices\AppleTypeServicesF65539 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Fault Tolerance: 
\f0\i0 \AppleTypeServices\AppleTypeServicesF65539 \cb1 \uc0\u8232 \cb3 In case of failures like node failures, network failures, etc., the framework should be able to recover and should start processing again from the point where it left. This is achieved through checkpointing the state of streaming to some persistent storage from time to time. e.g., checkpointing Kafka offsets to a zookeeper after getting the record from Kafka and processing it.\cb1 \
\ls1\ilvl0
\f1\i \AppleTypeServices\AppleTypeServicesF65539 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
State Management:\cb1 \uc0\u8232 
\f0\i0 \AppleTypeServices\AppleTypeServicesF65539 \cb3 In case of stateful processing requirements where we need to maintain some state (e.g., counts of each specific word seen in records), the framework should be able to provide some mechanism to preserve and update state information.\cb1 \
\ls1\ilvl0
\f1\i \AppleTypeServices\AppleTypeServicesF65539 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Performance
\f0\i0 \AppleTypeServices\AppleTypeServicesF65539 :\cb1 \uc0\u8232 \cb3 This includes latency(how soon a record can be processed), throughput (records processed/second), and scalability. Latency should be as minimum as possible, while throughput should be as much as possible. It is challenging to get both at the same time.\cb1 \
\ls1\ilvl0
\f1\i \AppleTypeServices\AppleTypeServicesF65539 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Advanced Features: Event Time Processing, Watermarks, Windowing
\f0\i0 \AppleTypeServices\AppleTypeServicesF65539 \cb1 \uc0\u8232 \cb3 These are features needed if stream processing requirements are complex. For example, processing records based on time generated at the source (event time processing). To know more in detail, please read these must-read posts by Google guy Tyler Akidau: {\field{\*\fldinst{HYPERLINK "https://www.oreilly.com/ideas/the-world-beyond-batch-streaming-101"}}{\fldrslt \ul part1}} and {\field{\*\fldinst{HYPERLINK "https://www.oreilly.com/ideas/the-world-beyond-batch-streaming-102"}}{\fldrslt \ul part2}}.\cb1 \
\ls1\ilvl0
\f1\i \AppleTypeServices\AppleTypeServicesF65539 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Maturity:\cb1 \uc0\u8232 
\f0\i0 \AppleTypeServices\AppleTypeServicesF65539 \cb3 It is essential from an adoption point of view; it is nice if the framework is already proven and battle-tested at scale by big companies. More likely to get good community support and help on StackOverflow.\
\pard\tx720\pardeftab720\partightenfactor0
\cf2 \
\
\
\
\pard\pardeftab720\partightenfactor0

\f2\b \AppleTypeServices\AppleTypeServicesF65539 \cf2 Two Types of Stream Processing:
\f0\b0 \AppleTypeServices\AppleTypeServicesF65539 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Now being aware of the terms we just discussed, it is now easy to understand that there are two approaches to implementing a Streaming framework:\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\i \AppleTypeServices\AppleTypeServicesF65539 \cf2 \cb3 Native Streaming
\f0\i0 \AppleTypeServices\AppleTypeServicesF65539  : \
Every incoming record is processed as soon as it arrives, without waiting for others. There are some continuous running processes (which we call operators/tasks/bolts depending upon the framework) that run forever. Every record passes through these processes to get processed\'97examples: Storm, Flink, Kafka Streams, Samza.\
\

\f1\i \AppleTypeServices\AppleTypeServicesF65539 Micro-batching
\f0\i0 \AppleTypeServices\AppleTypeServicesF65539 : \cb1 \uc0\u8232 \cb3 Also known as Fast Batching. It means incoming records every few seconds are batched together and then processed in a single mini-batch with a few seconds\'92 delay. Examples: Spark Streaming, Storm-Trident.\
\
This example counts unique words in any documentation. It saves the output in  a specific directory. }